/* Generated By:JJTree&JavaCC: Do not edit this line. JSONParser.java */
package ru.timofeevAS.generated;

//javase imports
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class JSONParser/*@bgen(jjtree)*/implements JSONParserTreeConstants, JSONParserConstants {/*@bgen(jjtree)*/
  protected JJTJSONParserState jjtree = new JJTJSONParserState();
    static protected String stripOffQuotes(String quotedString) {
        return quotedString.substring(1, quotedString.length() - 1);
    }
    public static String TRUE_ATOM = stripOffQuotes(tokenImage[K_TRUE]);
    public static String FALSE_ATOM = stripOffQuotes(tokenImage[K_FALSE]);

    public JSONParser() {
        super();
    }

    //cheat to sorta get generics on productions
    public <A> List<A> array() throws ParseException {
        return _array();
    }
    public <T> Map<String, T> object() throws ParseException {
        return _object();
    }

  final public Object parse() throws ParseException {
 /*@bgen(jjtree) parse */
SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Object o = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_OPENBRACE:
        o = _object();
        break;
      case O_OPENBRACKET:
        o = _array();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return o;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final protected Map _object() throws ParseException {
 /*@bgen(jjtree) _object */
SimpleNode jjtn000 = new SimpleNode(JJT_OBJECT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Map m = new LinkedHashMap();
    try {
      jj_consume_token(O_OPENBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case IDENTIFIER:
        members(m);
        break;
      default:
        ;
      }
      jj_consume_token(O_CLOSEBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return m;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final protected void members(Map m) throws ParseException {
 /*@bgen(jjtree) members */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      pair(m);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        jj_consume_token(O_COMMA);
        members(m);
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final protected void pair(Map m) throws ParseException {
 /*@bgen(jjtree) pair */
SimpleNode jjtn000 = new SimpleNode(JJTPAIR);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t = null;
Object o;
String fieldName = null;
    try {
      fieldName = fieldName();
      jj_consume_token(O_COLON);
      o = value();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        m.put(fieldName, o);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final protected String fieldName() throws ParseException {
 /*@bgen(jjtree) fieldName */
SimpleNode jjtn000 = new SimpleNode(JJTFIELDNAME);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String fieldName = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_QUOTED_STRING:
        jj_consume_token(SINGLE_QUOTED_STRING);
          fieldName = stripOffQuotes(token.image);
        break;
      case QUOTED_STRING:
        jj_consume_token(QUOTED_STRING);
          fieldName = stripOffQuotes(token.image);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
          fieldName = token.image;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return fieldName;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final protected List _array() throws ParseException {
 /*@bgen(jjtree) _array */
SimpleNode jjtn000 = new SimpleNode(JJT_ARRAY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);List a=new ArrayList();
    try {
      jj_consume_token(O_OPENBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TRUE:
      case K_FALSE:
      case K_NULL:
      case O_OPENBRACE:
      case O_OPENBRACKET:
      case NUMBER:
      case QUOTED_STRING:
      case SINGLE_QUOTED_STRING:
      case IDENTIFIER:
        elements(a);
        break;
      default:
        ;
      }
      jj_consume_token(O_CLOSEBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        Collections.reverse(a);
        {if (true) return a;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final protected void elements(List a) throws ParseException {
 /*@bgen(jjtree) elements */
SimpleNode jjtn000 = new SimpleNode(JJTELEMENTS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Object o = null;
    try {
      o = value();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        jj_consume_token(O_COMMA);
        elements(a);
        break;
      default:
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        a.add(o);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final protected Object value() throws ParseException {
 /*@bgen(jjtree) value */
SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t = null;
Object o = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_OPENBRACE:
        o = _object();
        break;
      case O_OPENBRACKET:
        o = _array();
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                        o = t.image;
        break;
      case SINGLE_QUOTED_STRING:
        t = jj_consume_token(SINGLE_QUOTED_STRING);
                                  o = stripOffQuotes(t.image);
        break;
      case QUOTED_STRING:
        t = jj_consume_token(QUOTED_STRING);
                           o = stripOffQuotes(t.image);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
            try {
              o = Integer.valueOf(t.image);
            }
            catch (NumberFormatException nfe1) {
                try {
                     o = new BigInteger(t.image);
                }
                catch  (NumberFormatException nfe2) {
                    try {
                         o = new BigDecimal(t.image);
                    }
                    catch  (NumberFormatException nfe3) {
                         o = Double.NaN;
                    }
                }
            }
        break;
      case K_TRUE:
        jj_consume_token(K_TRUE);
                  o = Boolean.TRUE;
        break;
      case K_FALSE:
        jj_consume_token(K_FALSE);
                   o = Boolean.FALSE;
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return o;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public JSONParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public JSONParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public JSONParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public JSONParser(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
